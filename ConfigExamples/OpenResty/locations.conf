    location /get_token {     
        content_by_lua_block {
            -- get config
            local sentinel_config = require "sentinel_config"
            local config, err = sentinel_config.get_config()
            if not config then
                ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                ngx.say("Error geting config: " .. (err or "unknown error"))
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            local cjson = require "cjson.safe"
            local jwt = require "resty.jwt"

            -- get Authorization header
            local auth_header = ngx.var.http_Authorization
            if not auth_header or not string.find(auth_header, "Bearer ") then
                ngx.status = ngx.HTTP_UNAUTHORIZED
                ngx.say("Missing or invalid Authorization header")
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end

            -- get & verify bearer token
            local token = string.sub(auth_header, 8)
            local jwt_obj = jwt:verify(config.librarian_hs256_key, token)
            if not jwt_obj.verified then
                ngx.status = ngx.HTTP_UNAUTHORIZED
                ngx.say("Invalid token: " .. (jwt_obj.reason or "unknown error"))
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end

            -- get body param
            ngx.req.read_body()
            local body = ngx.req.get_body_data()
            if not body then
                ngx.status = ngx.HTTP_BAD_REQUEST
                ngx.say("Missing request body")
                ngx.exit(ngx.HTTP_BAD_REQUEST)
            end

            -- get & verify param
            local args = cjson.decode(body)
            local base_dir_id = tonumber(args.base_dir_id)
            local binary_dir = args.binary_dir
            local size_bytes = tonumber(args.size_bytes)
            if not base_dir_id then
                ngx.status = ngx.HTTP_BAD_REQUEST
                ngx.say("Missing or invalid base_dir_id")
                ngx.exit(ngx.HTTP_BAD_REQUEST)
            end
            if not binary_dir then
                ngx.status = ngx.HTTP_BAD_REQUEST
                ngx.say("Missing or invalid binary_dir")
                ngx.exit(ngx.HTTP_BAD_REQUEST)
            end
            if not size_bytes then
                ngx.status = ngx.HTTP_BAD_REQUEST
                ngx.say("Missing or invalid size_bytes")
                ngx.exit(ngx.HTTP_BAD_REQUEST)
            end

            -- calc exp for returned jwt
            local size_gib = math.ceil(size_bytes / (1024^3))
            local exp_seconds = size_gib * config.filedl_expsec_pergib

            -- generate encrypted params
            local aes_enc = sentinel_config.get_aes_enc()
            local base_dir_id_enc = aes_enc:encrypt(tostring(base_dir_id))
            local binary_dir_enc = aes_enc:encrypt(tostring(binary_dir))

            -- sign JWT
            local jwt_token = jwt:sign(
                config.filedl_hs256_key,
                {
                    header = { typ = "JWT", alg = "HS256" },
                    payload = {
                        base_dir_id_enc = ngx.encode_base64(base_dir_id_enc),
                        binary_dir_enc = ngx.encode_base64(binary_dir_enc),
                        iat = ngx.time(),
                        nbf = ngx.time(),
                        exp = ngx.time() + exp_seconds
                    }
                }
            )
            ngx.status = ngx.HTTP_OK
            ngx.print(jwt_token)
            ngx.exit(ngx.HTTP_OK)
        }
    }
    
    location /file_download {
        access_by_lua_block {
            -- get config
            local sentinel_config = require "sentinel_config"
            local config, err = sentinel_config.get_config()
            if not config then
                ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                ngx.say("Error geting config: " .. (err or "unknown error"))
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end

            local jwt = require("resty.jwt")
            local aes = require("resty.aes")

            -- get file_path from GET param
            local args = ngx.req.get_uri_args()
            local arg_file_path = args["file_path"]
            if not arg_file_path then
                ngx.status = ngx.HTTP_BAD_REQUEST
                ngx.say("Missing file_path")
                ngx.exit(ngx.HTTP_BAD_REQUEST)
            end

            -- get token, prio: header > GET
            local auth_header = ngx.var.http_Authorization
            local arg_token = args["token"]
            if (not arg_token) and (not auth_header or not string.find(auth_header, "Bearer ")) then
                ngx.status = ngx.HTTP_UNAUTHORIZED
                ngx.say("Missing or invalid Authorization header")
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end

            -- get token
            local token
            if auth_header and string.find(auth_header, "Bearer ") then
                token = string.sub(auth_header, 8)
            else
                token = arg_token
            end

            -- verify token
            local jwt_obj = jwt:verify(config.filedl_hs256_key, token)
            if not jwt_obj.verified then
                ngx.status = ngx.HTTP_UNAUTHORIZED
                ngx.say("Invalid token: " .. (jwt_obj.reason or ""))
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end

            -- get param from token
            local payload = jwt_obj.payload
            local base_dir_id_enc = ngx.decode_base64(payload.base_dir_id_enc)
            if not base_dir_id_enc then
                ngx.status = ngx.HTTP_BAD_REQUEST
                ngx.say("Invalid base_dir_id_enc")
                ngx.exit(ngx.HTTP_BAD_REQUEST)
            end
            local binary_dir_enc = ngx.decode_base64(payload.binary_dir_enc)
            if not binary_dir_enc then
                ngx.status = ngx.HTTP_BAD_REQUEST
                ngx.say("Invalid binary_dir_enc")
                ngx.exit(ngx.HTTP_BAD_REQUEST)
            end

            -- decrypt
            local aes_enc = sentinel_config.get_aes_enc()
            local base_dir_id = aes_enc:decrypt(base_dir_id_enc)
            if not base_dir_id then
                ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                ngx.say("Failed to decrypt base_dir_id")
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end
            local base_dir = config.base_dir_id_path_map[tostring(base_dir_id)]
            if not base_dir then
                ngx.status = ngx.HTTP_BAD_REQUEST
                ngx.say("base_dir: " .. tostring(base_dir) .. "not exists")
                ngx.exit(ngx.HTTP_BAD_REQUEST)
            end
            local binary_dir = aes_enc:decrypt(binary_dir_enc)
            if not binary_dir then
                ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                ngx.say("Failed to decrypt binary_dir")
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end
            
            ngx.exec("/serve_file/" .. join_path(base_dir, binary_dir, arg_file_path):gsub("^/", ""))
        }
    }
    
    location /serve_file {
        internal;
        default_type application/octet-stream;
        
        alias /;
        try_files $uri =404;
        
        set_by_lua_block $filename {
            return get_filename_from_path(ngx.var.uri)
        }
        add_header Content-Disposition 'attachment; filename="$filename"';

        limit_conn_status 429;
        limit_conn conn_limit_per_ip 3;
        limit_rate 20k;
    }